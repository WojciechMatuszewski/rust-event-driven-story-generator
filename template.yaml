AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: https://serverlessland.com/blog/implementing-an-event-driven-serverless-story-generation-application-with-chatgpt-and-dall-e--aws-compute-blog

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Tracing: Active
  Api:
    TracingEnabled: True

Resources:
  StoryAudioBucket:
    Type: AWS::S3::Bucket
    Properties: {}

  StoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StoryTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GenerateStoryTextLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/story-text-generator/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64

  NotifyAudioGenerationStatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/story-audio-status-notifier/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64
      Environment:
        Variables:
          STORY_AUDIO_BUCKET_NAME: !Sub ${StoryAudioBucket}
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
                - states:SendTaskFailure
              Resource: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:StoryGenerationStateMachine

  AllowTopicLambdaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${NotifyAudioGenerationStatusLambda.Arn}
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Sub ${GenerateAudioStatusTopic.TopicArn}

  GenerateAudioStatusTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Sub ${NotifyAudioGenerationStatusLambda.Arn}
          Protocol: lambda

  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      # I had to explicitly specify the name due to circural dependency
      Name: StoryGenerationStateMachine
      DefinitionUri: ./machine.asl.json
      DefinitionSubstitutions:
        StoryTable: !Sub ${StoryTable}
        GenerateStoryTextLambda: !Sub ${GenerateStoryTextLambda.Arn}
        StoryAudioBucket: !Sub ${StoryAudioBucket}
        StoryAudioTopic: !Sub ${GenerateAudioStatusTopic.TopicArn}
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !Sub ${StoryTable.Arn}
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !Sub ${GenerateStoryTextLambda.Arn}
            - Effect: Allow
              Action:
                - polly:StartSpeechSynthesisTask
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub arn:aws:s3:::${StoryAudioBucket}/*
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Sub ${GenerateAudioStatusTopic.TopicArn}
