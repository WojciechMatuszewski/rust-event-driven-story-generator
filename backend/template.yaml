AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: https://serverlessland.com/blog/implementing-an-event-driven-serverless-story-generation-application-with-chatgpt-and-dall-e--aws-compute-blog

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Tracing: Active
  Api:
    TracingEnabled: True

Resources:
  StoryAudioBucket:
    Type: AWS::S3::Bucket
    Properties: {}

  StoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StoryTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ClientNotifierLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/client-notifier/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - iot:Publish
              Resource:
                - !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topic/story/*
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            BatchSize: 1 # The batch size is low to simulate slower events that come right after each other.
            StartingPosition: LATEST
            MaximumRetryAttempts: 2
            Stream: !Sub ${StoryTable.StreamArn}
            FilterCriteria:
              Filters:
                - Pattern: '{"eventName": ["INSERT", "MODIFY"]}'

  GenerateStoryTextLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/story-text-generator/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64

  NotifyAudioGenerationStatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/story-audio-status-notifier/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64
      Environment:
        Variables:
          STORY_AUDIO_BUCKET_NAME: !Sub ${StoryAudioBucket}
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
                - states:SendTaskFailure
              Resource: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:StoryGenerationStateMachine

  AllowTopicLambdaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${NotifyAudioGenerationStatusLambda.Arn}
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Sub ${GenerateAudioStatusTopic.TopicArn}

  GenerateAudioStatusTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Sub ${NotifyAudioGenerationStatusLambda.Arn}
          Protocol: lambda

  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      # I had to explicitly specify the name due to circular dependency.
      Name: StoryGenerationStateMachine
      DefinitionUri: ./machine.asl.json
      DefinitionSubstitutions:
        StoryTable: !Sub ${StoryTable}
        GenerateStoryTextLambda: !Sub ${GenerateStoryTextLambda.Arn}
        StoryAudioBucket: !Sub ${StoryAudioBucket}
        StoryAudioTopic: !Sub ${GenerateAudioStatusTopic.TopicArn}
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !Sub ${StoryTable.Arn}
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !Sub ${GenerateStoryTextLambda.Arn}
            - Effect: Allow
              Action:
                - polly:StartSpeechSynthesisTask
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub arn:aws:s3:::${StoryAudioBucket}/*
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Sub ${GenerateAudioStatusTopic.TopicArn}

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: false
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Sub ${CognitoUserPool}
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Sub ${CognitoUserPoolClient}
          ProviderName: !Sub ${CognitoUserPool.ProviderName}

  CognitoIdentityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Sub ${CognitoIdentityPool}
      Policies:
        - PolicyName: CognitoIdentityPoolRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iot:Connect
                Resource: !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:client/*
              - Effect: Allow
                Action:
                  - iot:Subscribe
                Resource: !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/story/*
              - Effect: Allow
                Action:
                  - iot:Receive
                Resource: !Sub arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topic/story/*

  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Sub ${CognitoIdentityPool}
      Roles:
        unauthenticated: !Sub ${CognitoIdentityRole.Arn}
        authenticated: !Sub ${CognitoIdentityRole.Arn}

Outputs:
  UserPoolId:
    Value: !Sub ${CognitoUserPool}
  UserPoolClientId:
    Value: !Sub ${CognitoUserPoolClient}
  IdentityPoolId:
    Value: !Sub ${CognitoIdentityPool}
